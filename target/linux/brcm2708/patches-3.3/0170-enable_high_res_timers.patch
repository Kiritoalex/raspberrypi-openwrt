From 0454b67d3029c98b1e525a29c0e8e4e91a86f627 Mon Sep 17 00:00:00 2001
From: popcornmix <popcornmix@gmail.com>
Date: Sat, 17 Mar 2012 23:23:01 +0000
Subject: [PATCH] Enable high resolution timers


Index: linux-3.3.8/arch/arm/configs/bcmrpi_cutdown_defconfig
===================================================================
--- linux-3.3.8.orig/arch/arm/configs/bcmrpi_cutdown_defconfig	2012-08-30 21:51:55.623106576 +0200
+++ linux-3.3.8/arch/arm/configs/bcmrpi_cutdown_defconfig	2012-08-30 21:52:03.879147542 +0200
@@ -17,6 +17,7 @@
 # CONFIG_BLK_DEV_BSG is not set
 CONFIG_ARCH_BCM2708=y
 CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
 CONFIG_AEABI=y
 CONFIG_ZBOOT_ROM_TEXT=0x0
 CONFIG_ZBOOT_ROM_BSS=0x0
Index: linux-3.3.8/arch/arm/configs/bcmrpi_defconfig
===================================================================
--- linux-3.3.8.orig/arch/arm/configs/bcmrpi_defconfig	2012-08-30 21:51:55.623106576 +0200
+++ linux-3.3.8/arch/arm/configs/bcmrpi_defconfig	2012-08-30 21:52:03.879147542 +0200
@@ -30,6 +30,7 @@
 CONFIG_CFQ_GROUP_IOSCHED=y
 CONFIG_ARCH_BCM2708=y
 CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
 CONFIG_AEABI=y
 CONFIG_SECCOMP=y
 CONFIG_CC_STACKPROTECTOR=y
Index: linux-3.3.8/arch/arm/mach-bcm2708/bcm2708.c
===================================================================
--- linux-3.3.8.orig/arch/arm/mach-bcm2708/bcm2708.c	2012-08-30 21:51:43.703047484 +0200
+++ linux-3.3.8/arch/arm/mach-bcm2708/bcm2708.c	2012-08-30 21:52:03.879147542 +0200
@@ -154,25 +154,44 @@
 	iotable_init(bcm2708_io_desc, ARRAY_SIZE(bcm2708_io_desc));
 }
 
-unsigned long frc_clock_ticks32(void)
+// The STC is a free running counter that increments at the rate of 1MHz
+#define STC_FREQ_HZ 1000000
+
+static cycle_t stc_read_cycles(struct clocksource *cs)
 {
 	/* STC: a free running counter that increments at the rate of 1MHz */
-	return readl(__io_address(ST_BASE + 0x04));
+	return (cycle_t)readl(__io_address(ST_BASE+0x04));
 }
 
-unsigned long long frc_clock_ticks63(void)
+static struct clocksource clocksource_stc = {
+	.name       = "stc",
+	.rating     = 300,
+	.read       = stc_read_cycles,
+	.mask       = CLOCKSOURCE_MASK(32),
+	.flags      = CLOCK_SOURCE_IS_CONTINUOUS,
+};
+
+unsigned long frc_clock_ticks32(void)
 {
-	unsigned long t = frc_clock_ticks32();
-	/* For cnt32_to_63 to work correctly we MUST call this routine
-	 * at least once every half-32-bit-wraparound period - that's once
-	 * every 35minutes or so - using it in sched_clock() should ensure this
-	 */
-	return cnt32_to_63(t);
+	return (unsigned long)stc_read_cycles(&clocksource_stc);
+}
+
+static void __init bcm2708_clocksource_init(void)
+{
+	// calculate .shift and .mult values and register clocksource
+	if (clocksource_register_hz(&clocksource_stc, STC_FREQ_HZ))
+	{
+		printk(KERN_ERR "timer: failed to initialize clock "
+			"source %s\n", clocksource_stc.name);
+	}
 }
 
 unsigned long long sched_clock(void)
 {
-	return 1000ull * frc_clock_ticks63();
+	return clocksource_cyc2ns(clocksource_stc.read(
+		 &clocksource_stc),
+		 clocksource_stc.mult,
+		 clocksource_stc.shift);
 }
 
 /*
@@ -483,6 +502,7 @@
 	bcm_register_device(&bcm2708_emmc_device);
 #endif
 	bcm2708_init_led();
+
 #ifdef CONFIG_BCM2708_VCMEM
 	{
 		extern void vc_mem_connected_init(void);
@@ -520,13 +540,13 @@
 
 }
 
-static int timer_set_next_event(unsigned long evt,
+static int timer_set_next_event(unsigned long cycles,
 				struct clock_event_device *unused)
 {
 	unsigned long stc;
 
 	stc = readl(__io_address(ST_BASE + 0x04));
-	writel(stc + TIMER_PERIOD, __io_address(ST_BASE + 0x18));	/* stc3 */
+	writel(stc + cycles, __io_address(ST_BASE + 0x18));	/* stc3 */
 	return 0;
 }
 
@@ -563,6 +583,9 @@
  */
 static void __init bcm2708_timer_init(void)
 {
+	/* init high res timer */
+	bcm2708_clocksource_init();
+
 	/*
 	 * Initialise to a known state (all timers off)
 	 */
@@ -573,7 +596,7 @@
 	setup_irq(IRQ_TIMER3, &bcm2708_timer_irq);
 
 	timer0_clockevent.mult =
-	    div_sc(1000000, NSEC_PER_SEC, timer0_clockevent.shift);
+	    div_sc(STC_FREQ_HZ, NSEC_PER_SEC, timer0_clockevent.shift);
 	timer0_clockevent.max_delta_ns =
 	    clockevent_delta2ns(0xffffffff, &timer0_clockevent);
 	timer0_clockevent.min_delta_ns =
